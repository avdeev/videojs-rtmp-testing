{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","streamUrl","handleStreamUrlChange","e","target","value","setState","handleSubmit","preventDefault","player","src","videoJsOptions","autoplay","controls","sources","this","type","videojs","videoNode","console","log","on","event","dispose","className","data-vjs-player","ref","node","width","height","onSubmit","onChange","placeholder","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4WA8EeA,G,iNAxEbC,MAAQ,CACNC,UAAW,mE,EA8BbC,sBAAwB,SAACC,GACvB,IAAMF,EAAYE,EAAEC,OAAOC,MAC3B,EAAKC,SAAS,CAAEL,e,EAGlBM,aAAe,SAACJ,GACdA,EAAEK,iBAEF,EAAKC,OAAOC,IAAI,EAAKV,MAAMC,Y,mFAlC3B,IAAMU,EAAiB,CACrBC,UAAU,EACVC,UAAU,EACVC,QAAS,CAAC,CACRJ,IAAKK,KAAKf,MAAMC,UAChBe,KAAM,eAKVD,KAAKN,OAASQ,YAAQF,KAAKG,UAAWP,GAAgB,WACpDQ,QAAQC,IAAI,gBAAiBL,SAG/BA,KAAKN,OAAOY,GAAG,SAAS,SAACC,GACvBH,QAAQC,IAAI,QAASE,Q,6CAMnBP,KAAKN,QACPM,KAAKN,OAAOc,Y,+BAeN,IAAD,OACP,OACE,yBAAKC,UAAU,OACb,yBAAKC,mBAAA,GACH,2BACEC,IAAM,SAAAC,GAAI,OAAI,EAAKT,UAAYS,GAC/BH,UAAU,WACVI,MAAM,MACNC,OAAO,SAIX,0BAAMC,SAAUf,KAAKR,cACnB,2BACEiB,UAAU,aACVR,KAAK,OACLX,MAAOU,KAAKf,MAAMC,UAClB8B,SAAUhB,KAAKb,sBACf8B,YAAY,wEAGd,4BAAQhB,KAAK,UAAb,gE,GAhEQiB,IAAMC,YCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCNNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3997e1e8.chunk.js","sourcesContent":["import React from 'react';\nimport videojs from 'video.js'\n\nimport './App.css';\n\nclass App extends React.Component {\n  state = {\n    streamUrl: 'https://bitdash-a.akamaihd.net/content/sintel/hls/playlist.m3u8',\n  }\n\n  componentDidMount() {\n    const videoJsOptions = {\n      autoplay: true,\n      controls: true,\n      sources: [{\n        src: this.state.streamUrl,\n        type: 'video/mp4'\n      }],\n    };\n\n    // instantiate Video.js\n    this.player = videojs(this.videoNode, videoJsOptions, function onPlayerReady() {\n      console.log('onPlayerReady', this)\n    });\n\n    this.player.on('error', (event) => {\n      console.log('error', event);\n    });\n  }\n\n  // destroy player on unmount\n  componentWillUnmount() {\n    if (this.player) {\n      this.player.dispose()\n    }\n  }\n\n  handleStreamUrlChange = (e) => {\n    const streamUrl = e.target.value;\n    this.setState({ streamUrl });\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    this.player.src(this.state.streamUrl);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div data-vjs-player>\n          <video\n            ref={ node => this.videoNode = node }\n            className=\"video-js\"\n            width=\"640\"\n            height=\"400\"\n          ></video>\n        </div>\n\n        <form onSubmit={this.handleSubmit}>\n          <input\n            className=\"App__input\"\n            type=\"text\"\n            value={this.state.streamUrl}\n            onChange={this.handleStreamUrlChange}\n            placeholder=\"Адрес стрима\"\n          />\n\n          <button type=\"submit\">\n            Запустить\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'video.js/dist/video-js.css';\nimport './index.css';\n\nimport '@videojs/http-streaming';\nimport 'videojs-flash';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}